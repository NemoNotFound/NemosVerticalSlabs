plugins {
    id 'multiloader-common'
    id 'net.neoforged.moddev'
}

neoForge {
    neoFormVersion = neo_form_version
    // Automatically enable AccessTransformers if the file exists
    def at = file('src/main/resources/META-INF/common/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    compileOnly group: 'org.spongepowered', name: 'mixin', version: '0.8.5'
    // fabric and neoforge both bundle mixinextras, so it is safe to use it in common
    compileOnly group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'
    annotationProcessor group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'
    compileOnly("maven.modrinth:nemos-mossy-blocks:${nemos_mossy_blocks_version}-neoforge")
    compileOnly("maven.modrinth:biomes-o-plenty:${biomes_o_plenty_version}-neoforge")
    compileOnly("maven.modrinth:terrablender:${terrablender_version}-neoforge")
    compileOnly("maven.modrinth:glitchcore:${glitchcore_version}-neoforge")
    compileOnly("com.electronwill.night-config:toml:${night_config_version}")
    compileOnly("com.electronwill.night-config:core:${night_config_version}")
    compileOnly("net.jodah:typetools:${typetools_version}")
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

