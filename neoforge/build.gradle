plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
}

base {
    archivesName = "${mod_id_jar}-NeoForge"
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/common/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', project.project(':common').file('src/generated/resources/').getAbsolutePath(), '--existing', project.project(':common').file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    compileOnly("maven.modrinth:nemos-mossy-blocks:${nemos_mossy_blocks_version}-neoforge")
    compileOnly("maven.modrinth:biomes-o-plenty:${biomes_o_plenty_version}-neoforge")
    compileOnly("maven.modrinth:terrablender:${terrablender_version}-neoforge")
    compileOnly("maven.modrinth:glitchcore:${glitchcore_version}-neoforge")
    compileOnly("com.electronwill.night-config:toml:${night_config_version}")
    compileOnly("com.electronwill.night-config:core:${night_config_version}")
    compileOnly("net.jodah:typetools:${typetools_version}")
}

sourceSets.main.resources { srcDir project.project(':common').file('src/generated/resources/').getAbsolutePath() }